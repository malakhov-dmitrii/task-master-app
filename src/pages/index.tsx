import { type User, type Chat, type Task } from "@prisma/client";
import { ArrowLeft } from "lucide-react";
import { type NextPage } from "next";
import Head from "next/head";

import { useEffect, useState } from "react";
import { toast } from "react-toastify";
import { Button } from "~/components/ui/button";
import { Skeleton } from "~/components/ui/skeleton";
import { TypographyH3, TypographyP } from "~/components/ui/typography";
import { api } from "~/utils/api";
import { type IWebApp } from "~/utils/types";

// Initial Data
// `query_id=AAGkpMIPAAAAAKSkwg90rG_p&
// user={
//   "id":264414372,
//   "first_name":"Dmitrii",
//   "last_name":"Malakhov",
//   "username":"Hennessy81",
//   "language_code":"en",
//   "is_premium":true
// }

//   &auth_date=1682682223
//   &hash=e74be172901c48fd17558bab28d9d286596bce877b6f223dce1f2ad57b82dba9`

// Generated by https://quicktype.io

const Home: NextPage = () => {
  const [selectedChat, setSelectedChat] = useState<
    (Chat & { tasks: (Task & { assignee: User | null })[] }) | null
  >(null);
  const [json, setJson] = useState<Partial<IWebApp> | null>(null);
  const chats = api.tasks.listChats.useQuery(
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-non-null-asserted-optional-chain
    { user_id: json?.initDataUnsafe?.user?.id! },
    { enabled: !!json?.initDataUnsafe?.user?.id },
  );
  const utils = api.useContext();
  const deleteTask = api.tasks.deleteTask.useMutation({
    onSettled: () => {
      void utils.tasks.listChats.invalidate();
      void utils.tasks.listChats.refetch();
    },
    onError: (error) => {
      toast.error(`Failed to delete: ${error.message}`);
    },
    onSuccess: () => {
      toast.success(`Task has been deleted`);
    },
  });
  const markTaskAsDone = api.tasks.markAsDone.useMutation({
    onSettled: () => {
      void utils.tasks.listChats.invalidate();
      void utils.tasks.listChats.refetch();
    },
    onError: (error) => {
      toast.error(`Failed to update status: ${error.message}`);
    },
    onSuccess: () => {
      toast.success(`Marked as done`);
    },
  });

  useEffect(() => {
    if (window.Telegram?.WebApp) {
      setJson(window.Telegram.WebApp);
    }
  }, []);

  if (!json?.initData)
    return (
      <div className="w-screen h-screen flex justify-center items-center">
        <TypographyH3>No user data is available</TypographyH3>
      </div>
    );

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container m-auto my-4">
        <TypographyH3>Active delegations</TypographyH3>
        <p className="text-slate-600 text-sm">
          Here you can see and manage the list of your active chats with active
          tasks.
        </p>
        <div className="border-b my-4"></div>

        {(chats.isLoading ||
          deleteTask.isLoading ||
          markTaskAsDone.isLoading) && (
          <Skeleton className="w-full h-screen"></Skeleton>
        )}

        {selectedChat ? (
          <div>
            <Button
              variant="link"
              className="px-0"
              onClick={() => setSelectedChat(null)}
            >
              <ArrowLeft className="w-4 h-4 mr-1" />
              Back
            </Button>
            <TypographyH3>{selectedChat.name}</TypographyH3>
            <div className="border-b my-4"></div>
            <div className="space-y-4">
              {selectedChat.tasks.map((task) => (
                <div key={task.id} className="px-4 py-2 border rounded shadow">
                  <TypographyP className="font-medium">{task.text}</TypographyP>
                  <p className="text-sm mt-2">
                    Assignee: {task.assignee?.fullName ?? "n/a"}
                  </p>

                  <p className="text-slate-600 text-xs">
                    Created: {task.createdAt.toLocaleString()}
                  </p>

                  <div className="flex gap-2 mt-2">
                    <Button
                      size="sm"
                      className="w-full"
                      onClick={() => {
                        markTaskAsDone.mutate({
                          task_id: task.id,
                        });
                      }}
                    >
                      Done
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      className="w-full"
                      onClick={() => {
                        alert("Not implemented yet");
                      }}
                    >
                      Edit
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      className="w-full"
                      onClick={() => {
                        deleteTask.mutate({
                          task_id: task.id,
                        });
                      }}
                    >
                      Delete
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ) : (
          <div className="divide-y">
            {chats.data?.map((chat) => (
              <div
                key={chat.id}
                className="px-2"
                onClick={() => setSelectedChat(chat)}
              >
                <p className="text-lg font-semibold">{chat.name}</p>
                <p className="text-sm text-slate-600">
                  {chat.tasks.length} active task
                  {chat.tasks.length > 1 ? "s" : ""}
                </p>
              </div>
            ))}
          </div>
        )}
      </main>
    </>
  );
};

export default Home;
